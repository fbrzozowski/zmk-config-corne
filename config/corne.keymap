/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt { tapping-term-ms = <150>; };

&lt {
    tapping-term-ms = <150>;
    flavor = "balanced";
};

/ {
    combos {
        compatible = "zmk,combos";

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <33 32>;
            layers = <1>;
        };

        spotlight {
            bindings = <&kp LG(SPACE)>;
            key-positions = <38 39>;
        };
    };

    macros {
        open_brave: open_brave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &kp B &kp R &kp A &kp V &kp E &kp ENTER>;
            label = "OPEN_BRAVE";
        };

        open_intellij: open_intellij {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &kp I &kp N &kp T &kp E &kp L &kp L &kp I &kp J &kp ENTER>;
            label = "OPEN_INTELLIJ";
        };

        open_iterm: open_iterm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &kp I &kp T &kp E &kp R &kp M &kp ENTER>;
            label = "OPEN_ITERM";
        };

        open_foobar: open_foobar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &kp F &kp O &kp O &kp B &kp A &kp R &kp N2 &kp N0 &kp N0 &kp N0 &kp ENTER>;
            label = "OPEN_FOOBAR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            bindings = <
&kp GRAVE  &kp Q  &kp W  &kp E      &kp R         &kp T             &kp Y                 &kp U            &kp I      &kp O    &kp P     &kp BACKSLASH
&kp TAB    &kp A  &kp S  &kp D      &kp F         &kp G             &kp H                 &kp J            &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C      &kp V         &kp B             &kp N                 &kp M            &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                         &kp LCTRL  &lt 3 DELETE  &mt LGUI SPACE    &mt LEFT_SHIFT ENTER  &lt 2 BACKSPACE  &kp RALT
            >;

            label = "qwerty";
        };

        colemak {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp GRAVE  &kp Q  &kp W  &kp F      &kp P         &kp G             &kp J                 &kp L            &kp U      &kp Y    &kp COLON  &kp BACKSLASH
&kp TAB    &kp A  &kp R  &kp S      &kp T         &kp D             &kp H                 &kp N            &kp E      &kp I    &kp O      &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C      &kp V         &kp B             &kp K                 &kp M            &kp COMMA  &kp DOT  &kp FSLH   &kp ESC
                         &kp LCTRL  &lt 3 DELETE  &mt LGUI SPACE    &mt LEFT_SHIFT ENTER  &lt 2 BACKSPACE  &kp RALT
            >;

            label = "colemak";
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&mt LG(LA(ESCAPE)) ESCAPE  &mt F1 EXCLAMATION  &mt F2 AT          &mt F3 HASH           &mt F4 DOLLAR          &mt F5 PERCENT    &mt F6 PLUS  &kp N7        &kp NUMBER_8  &kp NUMBER_9  &none  &none
&none                      &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none             &kp EQUAL    &kp NUMBER_4  &kp N5        &kp NUMBER_6  &none  &none
&kp LSHFT                  &trans              &kp AMPS           &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp UNDERSCORE    &kp MINUS    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none  &none
                                                                  &kp LESS_THAN         &kp GREATER_THAN       &kp SPACE         &kp RET      &trans        &kp NUMBER_0
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB            &bt BT_SEL 1            &bt BT_SEL 2            &bt BT_SEL 3          &bt BT_CLR         &kp K_VOLUME_UP      &kp C_PREV  &kp C_PAUSE    &kp C_NEXT   &none      &out OUT_BLE  &out OUT_USB
&kp LA(LC(ENTER))  &kp LC(LA(LEFT_ARROW))  &kp LC(LA(DOWN_ARROW))  &kp LC(LA(UP_ARROW))  &kp LC(LA(RIGHT))  &kp K_VOLUME_DOWN    &kp LEFT    &kp DOWN       &kp UP       &kp RIGHT  &tog 0        &sys_reset
&kp LSHFT          &none                   &open_foobar            &open_brave           &open_intellij     &kp K_MUTE           &none       &kp PAGE_DOWN  &kp PAGE_UP  &none      &none         &bootloader
                                                                   &kp LGUI              &none              &kp SPACE            &kp RET     &kp DEL        &kp RALT
            >;
        };
    };
};
